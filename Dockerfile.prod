FROM node:16-alpine


WORKDIR /app

COPY package.json package-lock.json ./

ARG HUSKY_SKIP_INSTALL=true
ARG NODE_ENV=production


RUN if test "$NODE_ENV" = 'development'; \
    then \
    npm ci --no-update-notifier \
    && npm cache clean --force 2> /dev/null \
    ; fi

# After building the application, remove the `devDependencies`
# for when NODE_ENV is "production" using a production mode install,
# leaving only the packages needed for production.

ADD ./ /app

RUN if test "$NODE_ENV" != 'development'; \
    then \
    NODE_ENV=development npm ci --no-update-notifier \
    && npm run build \
    && npm prune \
    && npm cache clean --force 2> /dev/null \
    ; fi


EXPOSE 3000 1337

ENTRYPOINT ["npm", "run"]

CMD ["start"]

# Build target base #
####################

# FROM node:16-alpine AS base
# WORKDIR /opt/
# ARG NODE_ENV=production
# ENV NEXTJS_IGNORE_ESLINT=1
# ENV NEXTJS_IGNORE_TYPECHECK=0
# ARG HUSKY_SKIP_INSTALL=true

# ENV PATH=/opt/node_modules/.bin:$PATH \
#     NODE_ENV="$NODE_ENV"
# RUN apk --no-cache add curl
# COPY ./package*.json ./
# EXPOSE 3000 1337

# # Build target dependencies #
# #############################
# FROM base AS dependencies
# # Install prod dependencies
# RUN npm ci && \
#     # Cache prod dependencies
#     cp -R node_modules /prod_node_modules && \
#     # Install dev dependencies
#     npm install --dev

# # Build target development #
# ############################
# FROM dependencies AS development
# COPY . /opt
# CMD [ "npm", "run", "dev" ]

# # Build target builder #
# ########################
# FROM base AS builder
# COPY --from=dependencies /opt/node_modules /app/node_modules
# COPY . ./app
# RUN npm run build && \
#     rm -rf node_modules

# # Build target production #
# ###########################
# FROM base AS production
# COPY --from=builder /app/apps/frontend/public /app/apps/frontend/public
# COPY --from=builder /app/apps/frontend/.next /app/apps/frontend/.next
# COPY --from=dependencies /prod_node_modules /app/apps/frontend/node_modules
# COPY --from=builder /app/packages /app/packages
# COPY --from=builder /app/apps /app/apps
# CMD [ "npm", "run", "start" ]

# HEALTHCHECK --interval=5s --timeout=5s --retries=3 \
#     CMD curl --fail http://localhost:3000 || exit 1